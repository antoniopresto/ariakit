---
import { BoxPatternsRight } from "#app/components/box-patterns.react.tsx";
import { NoScroll } from "#app/components/no-scroll.react.tsx";
import PageCard from "#app/components/page-card.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { getFramework } from "#app/lib/frameworks.ts";
import Layout from "#app/pages/_layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import uniq from "lodash-es/uniq";

export const getStaticPaths = (async () => {
  const entries = await getCollection("examples");
  const frameworks = uniq(entries.flatMap((entry) => entry.data.frameworks));
  const allExamples = await getCollection("examples");
  const allTags = await getCollection("tags");
  const allGalleries = await getCollection("galleries");

  return frameworks.flatMap((framework) => {
    const frameworkExamples = allExamples
      .filter((example) => example.data.frameworks.includes(framework))
      .sort((a, b) => a.data.title.localeCompare(b.data.title));
    const frameworkExampleIds = frameworkExamples.map((example) => example.id);
    const galleries = allGalleries.filter((gallery) =>
      frameworkExampleIds.includes(gallery.id)
    );
    const frameworkTagIds = frameworkExamples.flatMap((example) =>
      example.data.tags.map((t) => t.id)
    );
    const frameworkTags = allTags.filter((tag) =>
      frameworkTagIds.includes(tag.id)
    );

    return [null, ...frameworkTags].map((tag) => {
      const tagExamples = !tag
        ? frameworkExamples
        : frameworkExamples.filter((example) =>
            example.data.tags.find((t) => t.id === tag.id)
          );
      const frameworkLength = frameworkExamples.reduce((acc, example) => {
        const gallery = galleries.find((gallery) => gallery.id === example.id);
        return acc + (gallery?.data.length || 1);
      }, 0);

      const tagsWithLength = frameworkTags.map((tag) => {
        const tagExamples = !tag
          ? frameworkExamples
          : frameworkExamples.filter((example) =>
              example.data.tags.find((t) => t.id === tag.id)
            );
        const tagLength = tagExamples.reduce((acc, example) => {
          const gallery = galleries.find(
            (gallery) => gallery.id === example.id
          );
          return acc + (gallery?.data.length || 1);
        }, 0);
        return {
          ...tag,
          length: tagLength,
        };
      });

      return {
        params: { framework, tag: tag?.id },
        props: {
          frameworks,
          examples: tagExamples,
          frameworkTags,
          tag,
          tags: tagsWithLength,
          frameworkLength,
        },
      };
    });
  });
}) satisfies GetStaticPaths;

const { framework } = Astro.params;
const { examples, tags, tag, frameworkLength } = Astro.props;

Astro.locals.framework = framework;

const frameworkData = getFramework(framework);

const galleries = await getCollection("galleries");

function getCardDescription(id: string) {
  const gallery = galleries.find((gallery) => gallery.id === id);
  const length = gallery?.data.length || 1;
  return length === 1 ? "1 example" : `${length} examples`;
}

const title =
  tag && tag.data.label !== frameworkData.label
    ? `${tag.data.label} - ${frameworkData.label} Examples`
    : `${frameworkData.label} Examples`;
---

<Layout {title}>
  <NoScroll client:load />
  <div
    class="ak-container-size-default py-24 ak-container flex flex-col items-center gap-8"
  >
    <h1 class="text-2xl @3xl:text-4xl font-semibold relative mt-2 text-center">
      <span class="ak-text-primary/0">
        {frameworkLength * 100}
      </span>
      {frameworkData.label} Example{frameworkLength > 1 ? "s" : ""}
      <BoxPatternsRight />
    </h1>
    <button
      class="ak-input flex items-center gap-2 ak-frame-field/1 text-start"
    >
      <div class="flex items-center gap-2 ak-frame-field/2 flex-grow min-w-0">
        <Icon name="search" className="flex-none" />
        <div class="ak-input-placeholder truncate">
          Search {frameworkData.label} examples
        </div>
      </div>
      <div class="flex-1 w-10"></div>
      <kbd class="ak-text/0 ak-layer-pop-1.5 ak-frame-field/2">/</kbd>
    </button>
  </div>
  <div class="flex flex-col gap-8">
    <div class="sticky top-(--header-height) z-2 ak-layer-current">
      <ul
        id="tags-list"
        class="ak-container-size-default ak-container flex gap-2 py-3 overflow-x-auto items-center"
      >
        {
          [null, ...tags].map((t) => {
            const isCurrent = t?.id === tag?.id;
            return (
              <li>
                <a
                  href={`/${framework}/examples${t?.id ? `/${t.id}` : ""}`}
                  aria-current={isCurrent ? "page" : undefined}
                  class:list={[
                    "ak-button ak-layer-pop text-sm aria-[current]:ak-layer-pop-12 rounded-full ak-frame-field/1 gap-0",
                  ]}
                >
                  <span class="ak-frame-field/1 ps-2">
                    {t?.data.label ?? "All"}{" "}
                  </span>
                  <span
                    class:list={[
                      "ak-text/0 ak-frame-field/1 rounded-full px-1.5 ak-layer-pop min-w-6 text-center in-aria-[current]:ak-layer-pop-3",
                    ]}
                  >
                    {t?.length ?? frameworkLength}
                    <span class="sr-only">examples</span>
                  </span>
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
    <div
      class="ak-container-size-default ak-container grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4"
    >
      {
        examples.map((example) => (
          <PageCard
            href={`/${framework}/examples/${example.id}/`}
            thumbnailId={example.id}
            title={example.data.title}
            description={getCardDescription(example.id)}
            plus={example.data.tags.some((t) => t.id === "plus")}
          />
        ))
      }
    </div>
  </div>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const list = document.getElementById("tags-list");
    const current = list?.querySelector<HTMLElement>('[aria-current="page"]');
    current?.scrollIntoView({
      behavior: "instant",
      inline: "nearest",
      block: "nearest",
    });
  });
</script>
