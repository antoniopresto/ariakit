---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import {
  BoxPatternsLeftOnly,
  BoxPatternsRightOnly,
} from "#app/components/box-patterns.react.tsx";
import { components } from "#app/components/content-components.astro";
import ContentHeading from "#app/components/content-heading.astro";
import ContentLink from "#app/components/content-link.astro";
import ContentParagraph from "#app/components/content-paragraph.astro";
import Meta from "#app/components/meta.astro";
import PageCardExample from "#app/components/page-card-example.astro";
import SidebarMenu from "#app/components/sidebar-menu.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import { descriptionToText } from "#app/lib/content.ts";
import { mapTags } from "#app/lib/tags.ts";
import Layout from "#app/pages/_layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";

export const getStaticPaths = (async () => {
  const entries = await getCollection("components");
  const descriptions = await getCollection("descriptions");
  const galleries = await getCollection("galleries");
  const examples = await getCollection("examples");
  return entries.flatMap((entry) => {
    const id = `${entry.id}/_component`;
    const gallery = galleries.find((gallery) => gallery.id === id);
    const description = descriptions.find((header) => header.id === id);
    const componentExamples = examples.filter((example) =>
      example.data.components.some((component) => component.id === entry.id)
    );
    return entry.data.frameworks.map((framework) => ({
      params: { framework, component: `components/${entry.id}` },
      props: {
        entry,
        gallery,
        description,
        examples: componentExamples,
      } as const,
    }));
  });
}) satisfies GetStaticPaths;

const { framework } = Astro.params;
const { entry, gallery, description, examples } = Astro.props;
const { Content, headings } = await render(entry);
const { Content: Gallery } = gallery ? await render(gallery) : {};
const { Content: Description } = description ? await render(description) : {};

Astro.locals.framework = framework;
Astro.locals.example = entry.id;

headings.unshift(
  { slug: "examples", text: "Examples", depth: 2 },
  { slug: "api", text: "API Reference", depth: 2 }
);

const tags = mapTags(entry.data.tags, [framework]);
const title = entry.data.title;
const descriptionText = await descriptionToText(
  Description,
  framework,
  components
);
---

<Layout {title} {headings}>
  <Meta
    slot="meta"
    id={entry.id}
    type="components"
    title={title}
    framework={framework}
    description={descriptionText}
  />
  <div class="_overflow-x-clip">
    <div class="ak-container-size-default ak-container py-24">
      <h1
        class="text-4xl font-semibold mb-5 ak-container-size-default/0 ak-container relative"
      >
        {entry.data.title}
        <BoxPatternsLeftOnly />
      </h1>
      <div
        class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)] gap-3 items-start"
      >
        <div
          class="text-lg ak-container-size-content/0 ak-container flex flex-col gap-5"
        >
          {
            Description && (
              <div class="ak-text/60 ak-prose-elements text-lg/[1.8] [&_code]:ak-text/60 relative">
                <Description {framework} {components} />
                <BoxPatternsRightOnly />
              </div>
            )
          }
          {
            !!tags.length && (
              <ul class="flex gap-2">
                {tags.map((tag) => (
                  <li>
                    <a
                      href={`/${framework}/components/${tag.id}`}
                      class="ak-badge ak-button ak-layer-pop"
                    >
                      {tag.label}
                    </a>
                  </li>
                ))}
              </ul>
            )
          }
        </div>
      </div>
    </div>
  </div>
  <div
    data-gallery="true"
    class="ak-container-size-wider ak-container flex flex-col gap-12 mb-24"
  >
    {Gallery && <Gallery {framework} {components} />}
  </div>
  {
    !!examples.length && (
      <div class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/relaxed ak-container-size-wider ak-container mb-24">
        <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
          <ContentHeading as="h2" id="examples">
            <ContentLink href="#examples">Examples</ContentLink>
          </ContentHeading>
          <div />
          <ContentParagraph class="ak-text/0 mb-2">
            Learn <strong>{entry.data.title}</strong> by exploring these
            real-world examples.
          </ContentParagraph>
        </div>
        <div
          class:list={[
            "grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4 ak-container",
            // "ak-container-size-wider/0",
            "ak-container-size-default/0",
          ]}
        >
          {[
            ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
          ].map((example) => (
            <PageCardExample entry={example} />
          ))}
        </div>
      </div>
    )
  }
  <div class="mb-24">
    <div
      class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/relaxed ak-container-size-wider ak-container"
    >
      <ContentHeading as="h2" id="api" hasSidebar={false}>
        <ContentLink href="#api">API Reference</ContentLink>
      </ContentHeading>
      <div></div>
    </div>
    <div class="ak-layer-current border-y">
      <div
        class:list={[
          "overflow-x-clip ak-layer-current @5xl:grid content-start",
          "[--sidebar-menu-width:max(14rem,calc(100%-min(100%,var(--container-default)+var(--ak-container-p)*2))/2)]",
          "grid-cols-[var(--sidebar-menu-width)_min(calc(100%-var(--sidebar-menu-width)),calc(var(--container-wide)---spacing(2)))]",
        ]}
      >
        <SidebarMenu
          items={[
            { label: "Hooks" },
            { label: "usePopoverStore()", href: `/` },
            { label: "Components" },
            { label: "<Popover>", href: `/` },
            { label: "<PopoverDisclosure>", href: `/` },
          ]}
        />
        <div data-content="true" class="ak-layer-current border-s">
          <div class="@container">
            <div
              class="flex flex-col @max-3xl:[--container-sidebar:0] [--container-p:--spacing(3)]"
            >
              <div
                class="ak-container-size-[calc(100cqi-var(--ak-container-p)*2-var(--container-sidebar))]/(--container-p) ak-container ms-(--container-p) pt-3"
              >
                <div
                  class="ak-container-size-content/(--container-p) ak-container flex flex-col gap-4 ms-0"
                >
                  <h1 class="text-4xl font-semibold">{entry.data.title}</h1>
                  <div class="ak-text/60 text-lg/relaxed">Description</div>
                </div>
              </div>
              <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
                <div
                  class="ak-prose *:ms-0 @3xl:ak-container-size-[calc(100cqi-var(--container-sidebar))]/(--container-p) ak-container @5xl:ak-prose-text-lg/relaxed"
                >
                  <Content {framework} {components} />
                </div>
                <div class="hidden @3xl:block pe-(--container-p)">
                  <TableOfContents
                    {headings}
                    title={entry.data.title}
                    class="sticky top-[calc(var(--header-height)+--spacing(8))] max-h-[calc(100dvh---spacing(25))] overflow-y-auto"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div data-content="true" class="ak-container-size-wider ak-container">
    <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
      <div
        class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/relaxed"
      >
        <Content framework={framework} components={components} />
      </div>
      <div class="hidden @3xl:block ps-3">
        <TableOfContents
          title={entry.data.title}
          headings={headings}
          class="sticky top-[calc(var(--header-height)+--spacing(8))] max-h-[calc(100dvh---spacing(25))] overflow-y-auto"
        />
      </div>
    </div>
  </div>
</Layout>
